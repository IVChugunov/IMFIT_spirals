
Reading input image ("tests/gaussian_5x5.fits") ...
naxis1 [# pixels/row] = 5, naxis2 [# pixels/col] = 5; nPixels_input = 25
The whole image, row by row:
 0.000052 0.002109 0.007233 0.002109 0.000052
 0.002109 0.085049 0.291632 0.085049 0.002109
 0.007233 0.291632 1.000000 0.291632 0.007233
 0.002109 0.085049 0.291632 0.085049 0.002109
 0.000052 0.002109 0.007233 0.002109 0.000052

Reading PSF image ("tests/deltafn_5x5.fits") ...
naxis1 [# pixels/row] = 5, naxis2 [# pixels/col] = 5; nPixels_tot = 25
Images will be padded to 9 x 9 pixels in size
Normalizing the PSF ...
The whole input PSF image, row by row:
 0.000000 0.000000 0.000000 0.000000 0.000000
 0.000000 0.000000 0.000000 0.000000 0.000000
 0.000000 0.000000 1.000000 0.000000 0.000000
 0.000000 0.000000 0.000000 0.000000 0.000000
 0.000000 0.000000 0.000000 0.000000 0.000000

The whole *normalized* PSF image, row by row:
 0.000000 0.000000 0.000000 0.000000 0.000000
 0.000000 0.000000 0.000000 0.000000 0.000000
 0.000000 0.000000 1.000000 0.000000 0.000000
 0.000000 0.000000 0.000000 0.000000 0.000000
 0.000000 0.000000 0.000000 0.000000 0.000000

Shifting and wrapping the PSF ...
The whole padded, normalized PSF image, row by row:
  1.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000
  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000
  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000
  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000
  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000
  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000
  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000
  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000
  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000

Performing FFT of PSF image ...
Performing FFT of input image ...
Performing inverse FFT of multiplied image ...

Saving output convolved image ("convolve_out_new1.fits") ...
