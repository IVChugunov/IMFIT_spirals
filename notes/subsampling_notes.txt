NOTES ON SUBSAMPLING EXPERIMENTS:

1-D SUBSAMPLING
* Exponential (1-D): 100 subsamples per "pixel"
	* h = 1 pixel:
		r=0 is overestimated by ~ 27%; all other pixels are underestimated by ~ 4%
	* h = 2 pixels:
		r=0 overestimated by 13%; all other pixels underestimated by 1%
	* h = 3 pixels:
		r=0 overestimated by 8.6%; all other pixels underestimated by 0.5%
	* h = 5 pixels:
		r=0 overestimated by 5.1%; all other pixels underestimated by 0.02%

* Sersic, n=2 (1-D): 100 subsamples per "pixel"
	* r_e = 1 pixel:
		r=0 is overestimated by ~ 360%; r=1 underestimated by 17%, r=2 by 8%, r=3 by 5%,
		decaying to larger radii
	* r_e = 2 pixels:
		r=0 overestimated by 210%; r=1 underestimated by 10%, r-2 by 6%, r=3 by 3%,
		decaying to larger radii
	* r_e = 3 pixels:
		r=0 overestimated by 150%; r=1 underestimated by 7%, r-2 by 3%, r=3 by 2%,
		decaying to larger radii
	* r_e = 5 pixels:
		r=0 overestimated by 1090%; r=1 underestimated by 5%, r-2 by 2%, r=3 by 1.3%,
		decaying to larger radii


2-D SUBSAMPLING -- PROFILE ALONG MAJOR AXIS
* Exponential (1-D): 100 subsamples per pixel
	* h = 1 pixel:
		r=0 is overestimated by ~ 45%; r=1 by 0.5%; others underestimated
	* h = 2 pixels:
		r=0 overestimated by 21%; r=1 by 1.2%; other underestimated by <~ 0.5%
	* h = 3 pixels:
		r=0 overestimated by 13%; r=1 by 1.0%; r=2 by 0.2%
	* h = 5 pixels:
		r=0 overestimated by 8%; r=1 by 0.7%; r=2 by 0.3%; r=3 by 0.1%
	* h = 10 pixel:
		r=0 overestimated by 3.9%; r=1 by 0.4%, r=2 by 0.17%; r=3 by 0.1%




POSSIBLE CODING APPROACH:
	In FunctionObject.GetValue:
		Calculate r [and anything else needed]
		nSubsamples = CalculateSubsamples(r, xxx)
		if (nSubsamples == 1) {
			calculate and return value
		}
		else {
			do subsample calculations
			for (i = 0; i < nSubsamples; i++) {
				for (j = 0; j < nSubsamples; j++) {
					xxx
			


TENTATIVE NOTES & CONCLUSIONS:
	[] For *elliptical* objects, we should be careful to use (1 - ell)*scale_length
as the "working scale length"

	[] Interesting possible problem: edge-on disks have *two* scale lengths: radial
(which applies to distance from galaxy center) and vertical (which applies to distance
from z=0 line and therefor affects many more pixels)


